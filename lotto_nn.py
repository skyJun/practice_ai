import torch
import torch.nn as nn
import torch.optim as optim
import numpy as np
from sklearn.model_selection import TimeSeriesSplit
from torch.utils.data import Dataset, DataLoader, Subset
from collections import Counter
from scipy.optimize import linear_sum_assignment

# 하이퍼파라미터
window_size = 5
batch_size = 64
num_epochs = 500
learning_rate = 1e-4
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

lotto_numbers = [
    [5,7,12,20,25,26],
    [30,31,34,39,41,45],
    [10,16,19,27,37,38],
    [4,8,22,26,32,38],
    [1,9,10,13,35,44],
    [30,31,32,35,36,37],
    [2,3,9,15,27,29],
    [8,9,18,35,39,45],
    [8,15,19,21,32,36],
    [3,6,13,15,16,22],
    [7,11,24,26,27,37],
    [6,11,17,19,40,43],
    [2,11,31,33,37,44],
    [3,4,12,15,26,34],
    [10,16,17,27,28,36],
    [2,8,28,30,37,41],
    [7,11,12,21,26,35],
    [7,10,22,29,31,38],
    [5,12,15,30,37,40],
    [14,16,19,20,29,34],
    [4,9,12,15,33,45],
    [21,33,35,38,42,44],
    [1,6,13,19,21,33],
    [3,7,9,13,19,24],
    [13,14,20,28,29,34],
    [6,7,19,28,34,41],
    [1,2,6,14,27,38],
    [15,19,21,25,27,28],
    [5,10,11,17,28,34],
    [1,5,8,16,28,33],
    [10,15,24,30,31,37],
    [4,5,9,11,37,40],
    [6,14,25,33,40,44],
    [3,8,17,30,33,34],
    [13,19,21,24,34,35],
    [3,6,21,30,34,35],
    [6,24,31,32,38,44],
    [2,19,26,31,38,41],
    [1,9,12,13,20,45],
    [11,13,14,15,16,45],
    [3,4,9,30,33,36],
    [15,16,17,25,30,31],
    [7,12,23,32,34,36],
    [10,16,19,32,33,38],
    [11,13,20,21,32,44],
    [16,20,26,36,42,44],
    [3,13,30,33,43,45],
    [3,7,11,20,22,41],
    [10,12,13,19,33,40],
    [7,19,26,37,39,44],
    [6,14,30,31,40,41],
    [1,3,4,29,42,45],
    [6,16,34,37,39,40],
    [1,7,21,30,35,38],
    [10,12,29,31,40,44],
    [13,14,22,26,37,38],
    [6,7,13,28,36,42],
    [17,26,29,30,31,43],
    [3,20,28,38,40,43],
    [12,16,21,24,41,43],
    [14,33,34,35,37,40],
    [1,12,16,19,23,43],
    [8,14,28,29,34,40],
    [6,7,15,22,26,40],
    [10,17,22,30,35,43],
    [7,18,19,26,33,45],
    [6,20,23,24,28,30],
    [12,19,21,29,40,45],
    [4,18,31,37,42,43],
    [11,21,22,30,39,44],
    [13,14,18,21,34,44],
    [11,16,25,27,35,36],
    [4,7,17,18,38,44],
    [8,12,13,29,33,42],
    [3,7,14,15,22,38],
    [21,26,27,32,34,42],
    [1,9,16,23,24,38],
    [13,16,23,31,36,44],
    [4,8,18,24,37,45],
    [6,10,11,14,36,38],
    [4,8,17,30,40,43],
    [3,7,9,33,36,37],
    [1,23,24,35,44,45],
    [1,6,20,27,28,41],
    [6,18,28,30,32,38],
    [16,18,20,23,32,43],
    [1,2,11,21,30,35],
    [3,6,14,22,30,41],
    [1,10,18,22,28,31],
    [4,7,19,26,33,35],
    [7,10,19,23,28,33],
    [6,11,16,19,21,32],
    [3,18,19,23,32,45],
    [3,6,9,18,22,35],
    [3,6,22,23,24,38],
    [20,31,32,40,41,45],
    [4,24,27,35,37,45],
    [3,10,24,33,38,45],
    [7,10,22,25,34,40],
    [11,23,25,30,32,40],
    [8,13,19,27,40,45],
    [13,20,24,32,36,45],
    [4,7,12,14,22,33],
    [14,19,27,28,30,45],
    [22,26,29,30,34,45],
    [5,17,26,27,35,38],
    [21,26,30,32,33,35],
    [6,12,31,35,38,43],
    [3,5,13,20,21,37],
    [6,12,17,21,32,39],
    [2,20,33,40,42,44],
    [7,16,25,29,35,36],
    [6,14,15,19,21,41],
    [12,17,20,26,28,36],
    [3,5,12,22,26,31],
    [5,14,15,23,34,43],
    [6,7,9,11,17,18],
    [8,16,26,29,31,36],
    [2,3,6,19,36,39],
    [7,16,24,27,37,44],
    [2,14,15,22,27,33],
    [2,5,22,32,34,45],
    [9,14,34,35,41,42],
    [26,31,32,33,38,40],
    [3,11,15,20,35,44],
    [1,6,12,19,36,42],
    [6,7,22,32,35,36],
    [2,5,11,17,24,29],
    [12,30,32,37,39,41],
    [5,7,12,13,18,35],
    [14,16,27,35,39,45],
    [5,12,13,31,32,41],
    [8,9,20,25,29,33],
    [9,18,20,22,38,44],
    [10,14,16,18,29,35],
    [5,6,11,29,42,45],
    [12,15,17,24,29,45],
    [12,27,29,38,41,45],
    [1,4,13,17,34,39],
    [3,19,21,25,37,45],
    [12,18,22,23,30,34],
    [15,26,28,34,41,42],
    [14,23,31,33,37,40],
    [3,11,14,18,26,27],
    [21,22,26,34,36,41],
    [5,11,18,20,35,45],
    [1,9,12,26,35,38],
    [9,12,15,25,34,36],
    [15,23,29,34,40,44],
    [9,11,30,31,41,44],
    [8,11,16,19,21,25],
    [8,11,15,16,17,37],
    [8,13,18,24,27,29],
    [7,15,30,37,39,44],
    [1,4,29,39,43,45],
    [17,25,33,35,38,45],
    [6,10,12,14,20,42],
    [2,8,19,22,32,42],
    [1,3,9,14,18,28],
    [13,17,18,20,42,45],
    [4,7,14,16,24,44],
    [6,11,15,24,32,39],
    [1,4,13,29,38,39],
    [1,3,8,24,27,35],
    [6,14,16,18,24,42],
    [12,20,26,33,44,45],
    [13,18,25,31,33,44],
    [2,4,25,26,36,37],
    [17,18,21,27,29,33],
    [2,13,20,30,31,41],
    [2,4,15,23,29,38],
    [7,10,16,28,41,42],
    [17,21,23,30,34,44],
    [3,10,23,35,36,37],
    [13,23,26,31,35,43],
    [5,7,13,20,21,44],
    [27,36,37,41,43,45],
    [3,13,16,23,24,35],
    [7,11,16,21,27,33],
    [1,7,15,32,34,42],
    [2,9,10,14,22,44],
    [4,12,14,25,35,37],
    [7,8,9,17,22,24],
    [1,2,11,16,39,44],
    [22,26,31,37,41,42],
    [3,6,17,23,37,39],
    [2,6,17,18,21,26],
    [9,11,16,21,28,36],
    [3,9,10,29,40,45],
    [2,5,12,14,24,39],
    [1,6,13,37,38,40],
    [1,21,25,29,34,37],
    [2,13,25,28,29,36],
    [6,21,36,38,39,43],
    [6,12,19,23,34,42],
    [1,18,28,31,34,43],
    [11,20,29,31,33,42],
    [2,18,24,30,32,45],
    [1,14,15,24,40,41],
    [2,9,10,16,35,37],
    [4,15,24,35,36,40],
    [10,11,20,21,25,41],
    [4,9,23,26,29,33],
    [1,9,26,28,30,41],
    [7,9,22,27,37,42],
    [4,12,22,24,33,41],
    [2,12,30,31,39,43],
    [3,4,15,22,28,40],
    [14,21,35,36,40,44],
    [13,18,30,31,38,41],
    [3,8,17,20,27,35],
    [9,18,19,30,34,40],
    [9,10,15,30,33,37],
    [2,13,16,19,32,33],
    [1,8,13,36,44,45],
    [10,12,18,35,42,43],
    [12,14,25,27,39,40],
    [3,15,20,22,24,41],
    [4,11,28,39,42,45],
    [4,8,10,16,31,36],
    [2,10,13,22,29,40],
    [7,11,13,17,18,29],
    [4,10,20,32,38,44],
    [1,3,30,33,36,39],
    [23,27,29,31,36,45],
    [1,6,15,36,37,38],
    [14,15,23,25,35,43],
    [8,21,25,38,39,44],
    [7,9,12,15,19,23],
    [3,4,10,20,28,44],
    [4,15,22,38,41,43],
    [10,16,18,20,25,31],
    [13,24,32,34,39,42],
    [3,11,34,42,43,44],
    [3,17,18,23,36,41],
    [2,6,13,17,27,43],
    [5,7,12,22,28,41],
    [2,3,26,33,34,43],
    [9,14,17,18,42,44],
    [7,11,12,31,33,38],
    [1,3,23,24,27,43],
    [6,21,22,32,35,36],
    [2,6,11,13,22,37],
    [16,19,24,33,42,44],
    [6,14,16,21,27,37],
    [5,8,18,21,22,38],
    [4,5,12,14,32,42],
    [1,11,17,27,35,39],
    [7,24,29,30,34,35],
    [3,16,21,22,23,44],
    [21,27,29,38,40,44],
    [2,5,14,28,31,32],
    [3,4,16,27,38,40],
    [2,6,8,26,43,45],
    [2,15,16,21,22,28],
    [7,19,23,24,36,39],
    [5,18,20,23,30,34],
    [7,13,16,18,35,38],
    [8,19,20,21,33,39],
    [18,21,28,35,37,42],
    [6,7,12,22,26,36],
    [5,12,25,26,38,45],
    [16,26,31,38,39,41],
    [19,32,37,40,41,43],
    [1,15,17,23,25,41],
    [4,9,17,18,26,42],
    [9,13,28,31,39,41],
    [1,4,14,18,29,37],
    [3,13,29,38,39,42],
    [3,7,12,31,34,38],
    [8,14,17,27,36,45],
    [19,23,28,37,42,45],
    [1,3,24,27,39,45],
    [4,14,23,28,37,45],
    [9,18,32,33,37,44],
    [18,34,39,43,44,45],
    [4,18,20,26,27,32],
    [7,17,19,23,24,45],
    [1,4,10,14,15,35],
    [2,6,11,16,25,31],
    [5,17,18,22,23,43],
    [5,16,21,26,34,42],
    [19,22,30,34,39,44],
    [1,15,19,23,28,42],
    [3,5,12,13,33,39],
    [2,4,30,32,33,43],
    [2,6,12,26,30,34],
    [21,25,30,32,40,42],
    [2,6,20,27,37,39],
    [12,17,28,41,43,44],
    [14,17,19,22,24,40],
    [9,15,29,34,37,39],
    [3,15,22,32,33,45],
    [3,7,10,13,25,36],
    [16,21,28,35,39,43],
    [10,34,38,40,42,43],
    [11,17,19,21,22,25],
    [4,8,18,25,27,32],
    [8,22,35,38,39,41],
    [9,13,32,38,39,43],
    [6,10,16,28,34,38],
    [10,24,40,41,43,44],
    [8,15,17,19,43,44],
    [20,25,31,32,36,43],
    [2,8,23,26,27,44],
    [11,17,28,30,33,35],
    [14,18,22,26,31,44],
    [16,20,24,28,36,39],
    [5,13,17,29,34,39],
    [1,2,16,22,38,39],
    [12,16,26,28,30,42],
    [5,18,30,41,43,45],
    [1,16,29,33,40,45],
    [7,8,13,15,33,45],
    [19,21,30,33,34,42],
    [14,26,32,36,39,42],
    [5,11,14,30,33,38],
    [2,4,11,28,29,43],
    [3,9,11,12,13,19],
    [9,14,17,33,36,38],
    [2,25,28,30,33,45],
    [1,9,11,14,26,28],
    [9,10,13,28,38,45],
    [6,8,18,35,42,43],
    [12,18,30,39,41,42],
    [13,14,19,26,40,43],
    [3,10,16,19,31,39],
    [5,6,16,18,37,38],
    [4,5,31,35,43,45],
    [4,7,13,29,31,39],
    [5,11,12,29,33,44],
    [13,16,24,25,33,36],
    [8,15,21,31,33,38],
    [7,9,24,29,34,38],
    [12,18,24,26,39,40],
    [9,18,20,24,27,36],
    [1,12,13,24,29,44],
    [10,21,22,30,35,42],
    [16,25,33,38,40,45],
    [14,15,25,28,29,30],
    [3,9,12,13,25,43],
    [12,18,19,29,31,39],
    [17,21,25,26,27,36],
    [2,21,28,38,42,45],
    [11,30,34,35,42,44],
    [1,3,12,14,16,43],
    [8,11,19,21,36,45],
    [5,10,13,21,39,43],
    [6,11,15,17,23,40],
    [15,21,31,32,41,43],
    [6,10,18,25,34,35],
    [14,20,23,31,37,38],
    [3,12,13,18,31,32],
    [1,10,13,26,32,36],
    [5,9,14,26,30,43],
    [10,11,12,18,24,42],
    [17,25,28,37,43,44],
    [1,4,10,12,28,45],
    [12,17,23,34,42,45],
    [2,10,14,22,32,36],
    [5,22,31,32,39,45],
    [1,21,26,36,40,41],
    [3,10,13,26,34,38],
    [6,7,18,19,30,38],
    [10,15,21,35,38,43],
    [2,7,19,25,29,36],
    [2,10,12,31,33,42],
    [3,8,19,27,30,41],
    [2,6,7,12,19,45],
    [2,10,11,19,35,39],
    [5,6,13,16,27,28],
    [12,15,16,20,24,30],
    [4,6,15,25,26,33],
    [3,10,23,24,31,39],
    [14,15,16,17,38,45],
    [6,18,31,34,38,45],
    [11,16,18,19,24,39],
    [15,17,19,21,27,45],
    [6,12,19,24,34,41],
    [6,21,35,36,37,41],
    [6,12,17,21,34,37],
    [8,9,18,21,28,40],
    [11,12,29,33,38,42],
    [12,15,18,28,34,42],
    [8,12,19,21,31,35],
    [5,6,11,14,21,41],
    [6,10,17,18,21,29],
    [1,9,12,23,39,43],
    [5,7,11,16,41,45],
    [7,27,29,30,38,44],
    [5,15,20,31,34,42],
    [9,30,34,35,39,41],
    [1,3,8,12,42,43],
    [7,22,24,31,34,36],
    [3,8,16,32,34,43],
    [1,3,12,21,26,41],
    [4,7,11,24,42,45],
    [10,22,27,31,42,43],
    [9,33,36,40,42,43],
    [5,9,12,30,39,43],
    [6,7,11,17,33,44],
    [10,14,16,18,27,28],
    [13,14,26,28,30,36],
    [2,8,17,24,29,31],
    [2,17,19,24,37,41],
    [4,16,20,33,40,43],
    [3,4,16,20,28,44],
    [1,2,15,19,24,36],
    [12,14,24,26,34,45],
    [3,10,13,22,31,32],
    [7,9,12,14,23,28],
    [3,12,33,36,42,45],
    [1,2,3,9,12,23],
    [10,15,18,21,34,41],
    [15,19,21,34,41,44],
    [8,10,13,36,37,40],
    [5,21,27,34,44,45],
    [4,8,9,16,17,19],
    [7,22,29,33,34,35],
    [23,27,28,38,42,43],
    [13,15,18,24,27,41],
    [2,11,17,18,21,27],
    [5,10,13,27,37,41],
    [6,16,37,38,41,45],
    [11,24,32,33,35,40],
    [2,4,5,17,27,32],
    [2,7,13,25,42,45],
    [4,10,14,15,18,22],
    [11,17,21,26,36,45],
    [3,6,10,30,34,37],
    [7,8,10,19,21,31],
    [1,11,21,23,34,44],
    [6,7,19,21,41,43],
    [2,8,33,35,37,41],
    [20,30,33,35,36,44],
    [12,14,21,30,39,43],
    [1,28,35,41,43,44],
    [1,12,29,34,36,37],
    [4,8,13,19,20,43],
    [4,11,20,23,32,39],
    [2,11,19,25,28,32],
    [2,6,13,16,29,30],
    [2,7,27,33,41,44],
    [1,7,22,33,37,40],
    [2,5,15,18,19,23],
    [17,20,30,31,33,45],
    [11,15,24,35,37,45],
    [3,4,9,24,25,33],
    [10,18,30,36,39,44],
    [2,10,16,19,34,45],
    [2,12,19,24,39,44],
    [3,4,6,10,28,30],
    [1,6,17,22,28,45],
    [1,4,8,23,33,42],
    [10,28,31,33,41,44],
    [3,13,16,24,26,29],
    [3,10,14,16,36,38],
    [11,23,28,29,30,44],
    [4,5,8,16,21,29],
    [3,11,13,21,33,37],
    [2,5,8,11,33,39],
    [1,7,16,18,34,38],
    [4,18,26,33,34,38],
    [7,15,20,25,33,43],
    [1,6,11,28,34,42],
    [3,11,14,15,32,36],
    [15,27,33,35,43,45],
    [24,25,33,34,38,39],
    [7,17,19,30,36,38],
    [5,15,22,23,34,35],
    [1,8,10,13,28,42],
    [7,12,15,24,25,43],
    [6,7,12,28,38,40],
    [1,11,15,17,25,39],
    [6,13,20,27,28,40],
    [17,23,27,35,38,43],
    [21,24,27,29,43,44],
    [4,10,19,29,32,42],
    [3,5,7,14,26,34],
    [4,5,6,12,25,37],
    [12,15,24,36,41,44],
    [1,8,17,34,39,45],
    [1,8,11,15,18,45],
    [9,10,14,25,27,31],
    [7,10,17,29,33,44],
    [8,21,28,31,36,45],
    [7,9,10,13,31,35],
    [11,18,26,27,40,41],
    [7,8,20,29,33,38],
    [12,14,15,24,27,32],
    [15,17,25,37,42,43],
    [2,4,6,11,17,28],
    [5,6,11,17,38,44],
    [10,20,33,36,41,44],
    [3,5,8,19,38,42],
    [5,6,9,11,15,37],
    [2,3,12,20,27,38],
    [4,9,23,33,39,44],
    [7,18,19,27,29,42],
    [8,19,25,28,32,36],
    [10,14,19,39,40,43],
    [3,7,14,16,31,40],
    [7,37,38,39,40,44],
    [16,21,26,31,36,43],
    [5,6,26,27,38,39],
    [3,13,15,40,41,44],
    [11,12,16,26,29,44],
    [3,4,7,11,31,41],
    [3,21,22,33,41,42],
    [13,19,28,37,38,43],
    [5,16,21,23,24,30],
    [2,9,24,41,43,45],
    [1,4,16,26,40,41],
    [5,13,17,23,28,36],
    [15,24,31,32,33,40],
    [8,17,18,24,39,45],
    [11,18,21,36,37,43],
    [14,15,18,21,26,35],
    [6,15,22,23,25,32],
    [7,18,22,24,31,34],
    [3,16,22,37,38,44],
    [6,7,15,16,20,31],
    [11,13,25,26,29,33],
    [4,10,11,12,20,27],
    [9,12,19,20,39,41],
    [15,18,21,32,35,44],
    [1,2,4,23,31,34],
    [8,17,21,24,27,31],
    [19,28,31,38,43,44],
    [1,7,12,15,23,42],
    [2,9,22,25,31,45],
    [13,14,26,33,40,43],
    [3,6,7,20,21,39],
    [1,7,19,26,27,35],
    [7,13,30,39,41,45],
    [9,15,16,21,28,34],
    [1,2,6,16,19,42],
    [2,16,17,32,39,45],
    [6,8,13,30,35,40],
    [8,16,25,30,42,43],
    [4,5,11,12,24,27],
    [5,13,18,23,40,45],
    [10,17,18,19,23,27],
    [8,21,25,39,40,44],
    [7,8,11,16,41,44],
    [6,9,18,19,25,33],
    [2,22,27,33,36,37],
    [14,18,20,23,28,36],
    [4,8,27,34,39,40],
    [4,8,18,19,39,44],
    [8,14,23,36,38,39],
    [1,5,6,14,20,39],
    [1,2,7,9,10,38],
    [2,6,18,21,33,34],
    [2,19,25,26,27,43],
    [13,14,22,27,30,38],
    [2,16,19,31,34,35],
]

# 데이터 전처리: 1-based -> 0-based 변환
lotto_data = [[n-1 for n in draw] for draw in lotto_numbers]

# ---------------------------
# 제조 오차(물리 현상) 시뮬레이션
# 아래에서 불어 올리는 공기의 영향으로, 약간의 제조 차이가 실제 당첨 번호에 미치는 영향을 
# 단순하게 확률 편향으로 반영합니다.
# 각 공은 무게와 둘레에서 약간의 오차가 있다고 가정합니다.
# (실제 값: 기준 4g, ±5% / 둘레 44.5㎜, ±2.5%)
np.random.seed(42)
ball_weights = np.random.normal(4.0, 0.1, 45)        # 공마다 무게 (g): 평균 4.0, 표준편차 0.1
ball_diameters = np.random.normal(44.5, 1.0, 45)       # 공마다 둘레 (mm): 평균 44.5, 표준편차 1.0

# 공기의 강도(상수; 높을수록 아래에서 불어 올리는 힘이 강함)
airflow_intensity = 1.0

# 단순 모델: 공기 힘은 (airflow_intensity) / (공의 무게 × 공의 둘레)로 가정하고,
# 모든 공에 대해 계산한 후 정규화하여 확률 편향 벡터로 사용합니다.
ball_biases = airflow_intensity / (ball_weights * ball_diameters)
ball_biases = ball_biases / np.sum(ball_biases)  # 정규화 (합=1)
physical_bias_tensor = torch.FloatTensor(ball_biases).to(device)
#print("Physical bias per ball (1~45):", ball_biases)

# ---------------------------
# 데이터셋 클래스 (물리 정보 추가)
# ---------------------------
class EnhancedDataset(Dataset):
    def __init__(self, data, window_size=5):
        self.data = data
        self.window_size = window_size
        self.training = False  # 기본값
        
        # 비너스 추첨기 관련 물리적 정보
        # [가로(cm), 세로(cm), 전체 높이(cm), 전체 무게(kg), 혼합실 지름(cm),
        #  공 기준 무게(g), 공 기준 둘레(mm)]
        self.physical_params = np.array([80, 80, 220, 200, 50, 4, 44.5], dtype=np.float32)
        # 정규화를 위한 scale 값 (예시)
        self.physical_scale = np.array([100, 100, 250, 250, 100, 5, 50], dtype=np.float32)
        self.physical_features = self.physical_params / self.physical_scale  # shape (7,)
        
    def __len__(self):
        return len(self.data) - self.window_size
        
    def __getitem__(self, idx):
        window = self.data[idx:idx+self.window_size]
        next_num = self.data[idx+self.window_size]
        
        def create_features(nums):
            # 기존 피처: 번호 원-핫(45) + 짝수 비율(1) + 구간 분포(5) + 합계 정규화(1) = 52
            # 여기에 물리정보 7개를 추가하여 총 59차원 벡터로 구성
            vec = np.zeros(52 + 7, dtype=np.float32)
            vec[np.array(nums)] = 1  # 번호 원-핫
            actual_nums = [n+1 for n in nums]
            
            # 짝수 비율
            even_ratio = sum(1 for n in actual_nums if n % 2 == 0) / 6
            vec[45] = even_ratio
            
            # 번호 구간 분포: 1~10, 11~20, 21~30, 31~40, 41~45
            sections = [
                sum(1 for n in actual_nums if 1 <= n <= 10) / 6,
                sum(1 for n in actual_nums if 11 <= n <= 20) / 6,
                sum(1 for n in actual_nums if 21 <= n <= 30) / 6,
                sum(1 for n in actual_nums if 31 <= n <= 40) / 6,
                sum(1 for n in actual_nums if n >= 41) / 6
            ]
            vec[46:51] = sections
            
            # 합계 정규화 (최대합 300 정도 가정)
            sum_norm = sum(actual_nums) / 300.0
            vec[51] = sum_norm
            
            # 물리정보 추가 (인덱스 52~58)
            vec[52:] = self.physical_features
            return vec
        
        # 훈련 시 데이터 증강 (번호 순서를 섞어서)
        if self.training and np.random.rand() > 0.5:
            augmented_window = []
            for nums in window:
                nums_arr = np.array(nums)
                permuted = nums_arr[np.random.permutation(6)]
                augmented_window.append(permuted.tolist())
            window = augmented_window
        
        features = [create_features(nums) for nums in window]
        return (
            torch.FloatTensor(np.array(features)).to(device),
            torch.LongTensor(next_num).to(device)
        )

    def set_training(self, mode):
        self.training = mode

# 하이브리드 모델
# ---------------------------
# 하이브리드 모델 (CNN + LSTM + Transformer)
# 입력 차원은 59로 수정됨
# ---------------------------
class HybridModel(nn.Module):
    def __init__(self, input_size=59, hidden_size=128, num_layers=2):
        super().__init__()
        self.conv = nn.Sequential(
            nn.Conv1d(input_size, 64, kernel_size=3, padding=1),
            nn.ReLU(),
            nn.MaxPool1d(2),
            nn.Conv1d(64, 128, kernel_size=3, padding=1),
            nn.ReLU(),
            nn.AdaptiveMaxPool1d(1)
        )
        self.lstm = nn.LSTM(
            input_size=input_size,
            hidden_size=hidden_size,
            num_layers=num_layers,
            bidirectional=True,
            batch_first=True
        )
        self.transformer = nn.TransformerEncoder(
            nn.TransformerEncoderLayer(
                d_model=hidden_size*2,
                nhead=8,
                batch_first=True
            ),
            num_layers=2
        )
        self.fc = nn.Sequential(
            nn.Linear(256 + 128, 512),
            nn.ReLU(),
            nn.Linear(512, 45 * 6)
        )
        
    def forward(self, x):
        batch_size, window_size, _ = x.shape
        cnn_out = self.conv(x.permute(0, 2, 1))
        cnn_out = cnn_out.view(batch_size, -1)
        lstm_out, _ = self.lstm(x)
        trans_out = self.transformer(lstm_out)
        cnn_expanded = cnn_out.unsqueeze(1).expand(-1, window_size, -1)
        combined = torch.cat([cnn_expanded, trans_out], dim=2)
        out = self.fc(combined[:, -1, :])
        return out.view(-1, 6, 45)

# ---------------------------
# 순열 불변 손실 함수
# ---------------------------
class PermutationInvariantLoss(nn.Module):
    def __init__(self, base_loss=nn.CrossEntropyLoss(reduction='none')):
        super().__init__()
        self.base_loss = base_loss
        
    def forward(self, outputs, targets):
        batch_size = outputs.size(0)
        total_loss = 0
        for i in range(batch_size):
            cost_matrix = torch.zeros(6, 6, device=device)
            for p in range(6):
                for t in range(6):
                    logit = outputs[i, p].unsqueeze(0)
                    target = targets[i, t].unsqueeze(0)
                    cost_matrix[p, t] = self.base_loss(logit, target).mean()
            row_ind, col_ind = linear_sum_assignment(cost_matrix.cpu().detach().numpy())
            total_loss += cost_matrix[row_ind, col_ind].sum()
        return total_loss / batch_size

# ---------------------------
# 확률적 샘플링 (물리현상 반영)
# ---------------------------
def probabilistic_sampling(model, input_data, num_samples=1000):
    """
    모델의 출력 확률에 대해, 아래에서 불어 올리는 공기의 영향(물리 bias)을 
    각 공 번호의 선택 확률에 반영하여 샘플링합니다.
    """
    model.eval()
    with torch.no_grad():
        logits = model(input_data)
        probs = torch.softmax(logits, dim=-1)  # shape: (batch, 6, 45)
    
    samples = []
    for _ in range(num_samples):
        sample = set()
        while len(sample) < 6:
            pos = len(sample)
            # 기본 확률에 물리 bias를 곱하여 보정합니다.
            adjusted_probs = probs[0, pos] * physical_bias_tensor
            adjusted_probs = adjusted_probs / adjusted_probs.sum()
            idx = torch.multinomial(adjusted_probs, 1).item()
            num = idx + 1  # 0-base -> 1-base
            if num not in sample:
                sample.add(num)
        samples.append(sorted(sample))
    
    filtered = [s for s in samples if validate_combination(s)]
    return most_common_combinations(filtered if filtered else samples)

def validate_combination(nums):
    # 예시 조건: 짝수 개수 2~4, 각 구간(1~10, 11~20, ...)의 최대 개수 제한
    even = sum(1 for n in nums if n % 2 == 0)
    if not 2 <= even <= 4:
        return False
    sections = [
        sum(1 for n in nums if 1 <= n <= 10),
        sum(1 for n in nums if 11 <= n <= 20),
        sum(1 for n in nums if 21 <= n <= 30),
        sum(1 for n in nums if 31 <= n <= 40),
        sum(1 for n in nums if 41 <= n <= 45)
    ]
    return max(sections) <= 3
def most_common_combinations(samples, top=10):
    cnt = Counter(tuple(sorted(x)) for x in samples)
    return [list(item[0]) for item in cnt.most_common(top)]

# ---------------------------
# 평가 함수
# ---------------------------
def evaluate_model(model, dataloader):
    model.eval()
    hit_counts = {n: 0 for n in range(1, 7)}
    with torch.no_grad():
        for inputs, targets in dataloader:
            targets_np = targets.cpu().numpy() + 1
            preds = probabilistic_sampling(model, inputs)
            for pred, target in zip(preds, targets_np):
                target_set = set(target)
                matches = len(target_set & set(pred))
                if matches in hit_counts:
                    hit_counts[matches] += 1
    total = len(dataloader.dataset)
    print("Evaluation Results:")
    for k in sorted(hit_counts.keys()):
        print(f"{k} matches: {hit_counts[k] / total:.2%}")
    return hit_counts

# ---------------------------
# 학습 함수
# ---------------------------
def train_model(model, dataloader, criterion, optimizer):
    model.train()
    total_loss = 0.0
    for inputs, targets in dataloader:
        optimizer.zero_grad()
        outputs = model(inputs)
        loss = criterion(outputs, targets)
        loss.backward()
        optimizer.step()
        total_loss += loss.item()
    avg_loss = total_loss / len(dataloader)
    print(f"Train Loss: {avg_loss:.4f}")


# ---------------------------
# DataLoader 준비
# ---------------------------
full_dataset = EnhancedDataset(lotto_data, window_size)
full_dataset.set_training(True)
tscv = TimeSeriesSplit(n_splits=5)
splits = list(tscv.split(full_dataset))
train_indices, val_indices = splits[-1]
train_dataset = Subset(full_dataset, train_indices)
val_dataset = Subset(full_dataset, val_indices)
train_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True)
val_loader = DataLoader(val_dataset, batch_size=batch_size, shuffle=False)

# ---------------------------
# 모델, 손실함수, 옵티마이저 초기화
# ---------------------------
model = HybridModel(input_size=59).to(device)
criterion = PermutationInvariantLoss()
optimizer = optim.AdamW(model.parameters(), lr=learning_rate)

# ---------------------------
# 예측 입력 생성 함수 (물리정보 포함)
# ---------------------------
def create_prediction_input(data, window_size, physical_features, physical_scale):
    recent_draws = data[-window_size:]
    features = []
    for nums in recent_draws:
        vec = np.zeros(52 + 7, dtype=np.float32)
        vec[np.array(nums)] = 1
        actual_nums = [n+1 for n in nums]
        even_ratio = sum(1 for n in actual_nums if n % 2 == 0) / 6
        vec[45] = even_ratio
        sections = [
            sum(1 for n in actual_nums if 1 <= n <= 10) / 6,
            sum(1 for n in actual_nums if 11 <= n <= 20) / 6,
            sum(1 for n in actual_nums if 21 <= n <= 30) / 6,
            sum(1 for n in actual_nums if 31 <= n <= 40) / 6,
            sum(1 for n in actual_nums if n >= 41) / 6
        ]
        vec[46:51] = sections
        sum_norm = sum(actual_nums) / 300.0
        vec[51] = sum_norm
        vec[52:] = physical_features / physical_scale
        features.append(vec)
    return torch.FloatTensor(np.array(features)).unsqueeze(0).to(device)

# ---------------------------
# 메인 실행
# ---------------------------
if __name__ == "__main__":
    for epoch in range(num_epochs):
        print(f"Epoch {epoch+1}/{num_epochs}")
        train_model(model, train_loader, criterion, optimizer)
        evaluate_model(model, val_loader)
        print("-" * 50)
    
    # 최종 예측: 최신 로또 번호 이력과 물리정보를 사용하여 예측
    input_tensor = create_prediction_input(
        lotto_data, window_size,
        physical_features=np.array([80, 80, 220, 200, 50, 4, 44.5], dtype=np.float32),
        physical_scale=np.array([100, 100, 250, 250, 100, 5, 50], dtype=np.float32)
    )
    predictions = probabilistic_sampling(model, input_tensor)
    
    print("\nTop 10 Recommended Combinations:")
    for i, comb in enumerate(predictions[:10]):
        print(f"{i+1}: {comb}")